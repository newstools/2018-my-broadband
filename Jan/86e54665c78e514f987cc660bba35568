With a little bit of work, you can turn a Raspberry Pi into a functional Ethereum node, complete with a built-in wallet. While using an online wallet is convenient, using your own wallet allows you to hold your private keys and have direct control over your cryptocurrency. This isnâ€™t the only advantage however, as running an Ethereum node allows you to interact directly with the blockchain and store any compatible ERC-20 tokens. It should be noted that by creating an Ethereum node on your Raspberry Pi and storing your cryptocurrency in it, you are responsible to back up and secure those keys. If you lose your private key, the cryptocurrency associated with that key will also be lost. While it may be easier to download and run an Ethereum client on your desktop PC, running a node on a Raspberry Pi draws far less power. To set up an Ethereum node on a Raspberry Pi, you will need the following components: Additionally, you may want to use a USB keyboard and monitor when setting up your Raspberry Pi node.  There are a number of ways to install an Ethereum client on your Raspberry Pi, but the easiest is to simply download a compatible version of the Geth or Parity clients from GitHub. The light versions of these clients can be installed directly onto the Pi using the command line interface. Running a light node means you will not be downloading the entire Ethereum blockchain, which is helpful considering the limited storage space of the Raspberry Pi. For a step-by-step installation of Parity or Geth on your Raspberry Pi, you can use the compatible image provided by the EthRaspbian project. This process will set up your device to run either the Parity or Geth clients on startup, automatically turning it into a functional node. Simply follow the steps below to set up Geth or Parity on your Raspberry Pi: Your Geth or Parity Lite client should start up on system boot, and you can now check that SSH is enabled before disconnecting your peripherals and interacting with the node remotely. Both Geth and Parity feature built-in wallets which can are set up within their respective interfaces. Each client also includes support for fast blockchain synchronisation and can be operated using command lines or web interfaces. While having your own secure wallet running is useful for controlling your private keys, running a node opens up even more options for developers. Coders looking to make use of Solidity and the Ethereum Virtual Machine can run a node on the test network and practice creating smart contracts before actually implementing their code directly on Ethereum. While the Ethereum blockchain and its client interfaces are slightly cryptic to work with, they are open source and extremely powerful, allowing participants extremely high levels of control.